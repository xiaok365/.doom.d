#+TITLE: Kyle's Doom Emacs Config
#+AUTHOR: Kyle Wilson
#+DESCRIPTION: KW's personal Doom Emacs config.
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#email][EMAIL]]
- [[#beacon][BEACON]]
- [[#setup][SETUP]]
- [[#proxy][PROXY]]
- [[#transparency][TRANSPARENCY]]
- [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#elfeed][ELFEED]]
- [[#fonts][FONTS]]
- [[#theme][THEME]]
- [[#line-number][LINE-NUMBER]]
- [[#dired][DIRED]]
  - [[#trash][TRASH]]
  - [[#search][SEARCH]]
- [[#org][ORG]]
  - [[#tangle][TANGLE]]
  - [[#org-fonts][ORG-FONTS]]
  - [[#org-mode][ORG-MODE]]
  - [[#org-agenda][ORG-AGENDA]]
- [[#sublimity][SUBLIMITY]]
- [[#markdown][MARKDOWN]]
- [[#window][WINDOW]]
- [[#lsp-java][LSP-JAVA]]
- [[#dap][DAP]]
- [[#eaf][EAF]]

* ABOUT THIS CONFIG
This is my personal Doom Emacs config.

Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* EMAIL
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp :tangle no
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

* BEACON
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* SETUP
Maximize the Emacs frame on startup.

#+begin_src emacs-lisp
;; (pushnew! initial-frame-alist '(width . 200) '(height . 55))
(add-hook 'window-setup-hook #'toggle-frame-maximized)
;; (add-hook 'window-setup-hook #'toggle-frame-fullscreen)
#+end_src

* PROXY
This variable is an alist of URL schemes and proxy servers that gateway them.

#+begin_src emacs-lisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "127.0.0.1:1087")
     ("https" . "127.0.0.1:1087")))
#+end_src

* TRANSPARENCY
Make background transparent.

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha 95 95))
#+end_src

* OPEN SPECIFIC FILES
Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with ‘C-x C-f’ in GNU Emacs or ‘SPC f f’ in Doom Emacs.  These keybindings use find-file non-interactively since we specify exactly what file to open.

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("e" . "open file")
       :desc "Edit agenda file"      "a" #'(lambda () (interactive) (find-file "~/Documents/org/agenda.org"))
       :desc "Edit elfeed file"      "e" #'(lambda () (interactive) (find-file "~/Documents/org/elfeed.org"))
       :desc "Edit travel file"      "t" #'(lambda () (interactive) (find-file "~/Documents/org/travel.org"))
       :desc "Edit doom config.org"  "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit doom init.el"     "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))))
#+end_src

* ELFEED
Read RSS feeds in the comfort of Emacs.

#+begin_src emacs-lisp
(setq http-proxy "http://127.0.0.1:1087")
(setq elfeed-goodies/entry-pane-size 0.5)
(use-package mb-url-http
  ;; :load-path "~/.emacs.d/mb-url"
  :defer t
  :commands (mb-url-http-around-advice)
  :init
  (setq mb-url-http-backend 'mb-url-http-curl
        mb-url-http-curl-switches `("--max-time" "20" "-x" ,http-proxy))
  (advice-add 'url-http :around 'mb-url-http-around-advice))
;; Automatically updating feed when opening elfeed
;; (add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

* FONTS
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack Nerd Font" :size 15 :weight 'normal)
     doom-variable-pitch-font (font-spec :family "Hack Nerd Font" :size 15 :weight 'normal)
     doom-big-font (font-spec :family "Hack Nerd Font" :size 18 :weight 'normal))
#+end_src

* THEME
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-xcode)
#+end_src

* LINE-NUMBER
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* DIRED
Dired is the file manager within Emacs.

** TRASH
Making deleted files go to trash can.
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/Trash/")
#+end_src

** SEARCH
Searching hidden files.

#+begin_src emacs-lisp
(after! counsel
  (setq counsel-rg-base-command
        "rg -M 240 --hidden --with-filename --no-heading --line-number --color never %s"))
#+end_src

* ORG
I wrapped most of this block in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom’s defaults.  I have also enabled org-journal, org-superstar by adding (+journal +pretty) to the org section of my Doom Emacs init.el.

** TANGLE

#+begin_src emacs-lisp :tangle yes
(setq org-babel-default-header-args
      (cons '(:tangle . "yes")
            (assq-delete-all :tangle org-babel-default-header-args)))

;; (map! :leader
;;       :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src

** ORG-FONTS
Set font size for org mode.

#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
  '(org-level-6 ((t (:inherit outline-6 :height 1.2))))
  '(org-level-7 ((t (:inherit outline-7 :height 1.1))))
  '(org-level-8 ((t (:inherit outline-8 :height 1.0))))
)
#+end_src

** ORG-MODE
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/Documents/org/"
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "BLOG(b)"           ; Blog writing assignments
             "GYM(g)"            ; Things to accomplish at the gym
             "PROJ(p)"           ; A project that contains other tasks
             "VIDEO(v)"          ; Video assignments
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
#+end_src

** ORG-AGENDA

#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Documents/org/agenda.org")))
(setq
   ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
   ;; org-fancy-priorities-list '("❗" "[B]" "[C]")
   org-fancy-priorities-list '("🟥" "🟧" "🟨")
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight bold)
     (?B :foreground "#98be65" :weight bold)
     (?C :foreground "#c678dd" :weight bold))
   org-agenda-block-separator 8411)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "customtag"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks marked with customtag:")))

          (agenda "")
          (alltodo "")))))
#+end_src

* SUBLIMITY
smooth-scrolling, minimap and distraction-free mode.

#+begin_src emacs-lisp
(require 'sublimity)
(require 'sublimity-scroll)
;; (require 'sublimity-map) ;; experimental
;; (require 'sublimity-attractive)

(sublimity-mode 1)
(setq sublimity-scroll-weight 5
      sublimity-scroll-drift-length 10)
(setq sublimity-scroll-vertical-frame-delay 0.01)

;; (setq sublimity-map-size 20)
;; (setq sublimity-map-fraction 0.3)
;; (setq sublimity-map-text-scale -7)
;; (sublimity-map-set-delay nil)

;; (setq sublimity-attractive-centering-width 110)
;;
;; (sublimity-attractive-hide-bars)
;; (sublimity-attractive-hide-vertical-border)
;; (sublimity-attractive-hide-fringes)
;; (sublimity-attractive-hide-modelines)
#+end_src

* MARKDOWN
Beautify markdown on emacs.

#+begin_src emacs-lisp
(custom-set-faces!
'(markdown-header-delimiter-face :foreground "#616161" :height 0.9)
'(markdown-header-face-1 :height 1.7 :foreground "#A3BE8C" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-2 :height 1.6 :foreground "#EBCB8B" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-3 :height 1.5 :foreground "#D08770" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-4 :height 1.4 :foreground "#BF616A" :weight bold :inherit markdown-header-face)
'(markdown-header-face-5 :height 1.3 :foreground "#b48ead" :weight bold :inherit markdown-header-face)
'(markdown-header-face-6 :height 1.2 :foreground "#5e81ac" :weight semi-bold :inherit markdown-header-face))

;; (use-package markdown-mode :ensure t
;;   :init
;;   (setq-default markdown-hide-markup t))
#+end_src

* WINDOW

#+begin_src emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+end_src

* LSP-JAVA

#+begin_src emacs-lisp
(when (featurep! :lang java +lsp)
  (setq lsp-java-maven-download-sources t
        lsp-java-autobuild-enabled nil
        lsp-java-selection-enabled nil
        lsp-java-code-generation-use-blocks t
        lsp-java-code-generation-generate-comments t
        lsp-java-code-generation-to-string-code-style "STRING_BUILDER")

  ;; Lombok support
  ;; See https://github.com/redhat-developer/vscode-java/wiki/Lombok-support
  (after! lsp-java
    (push (concat "-javaagent:"
                  (expand-file-name "~/.local/share/nvim/mason/packages/jdtls/lombok.jar"))
          lsp-java-vmargs))

  ;; Groovy
  (add-hook 'groovy-mode-local-vars-hook #'lsp!))
#+end_src

* DAP

#+begin_src emacs-lisp
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src

* EAF

#+begin_src emacs-lisp :tangle no
(use-package! eaf
   ;; 设定只有手动调用以下命令后，eaf才会加载
   :commands (eaf-open eaf-open-bookmark eaf-open-browser eaf-open-browser-with-history)
   :init
   ;; 设定emacs中打开链接默认使用eaf打开
   (setq browse-url-browser-function 'eaf-open-browser)
   (defalias 'browse-web #'eaf-open-browser)
   ;; 定义了一个用于开启eaf debug模式的函数
   (defun +eaf-enable-debug ()
     (interactive)
       (setq eaf-enable-debug t))
   ;; :custom
   ;; ;; 设定eaf代理
   ;; (eaf-proxy-type "socks5")
   ;; (eaf-proxy-host "127.0.0.1")
   ;; (eaf-proxy-port "1086")
   :config
   ;; 下面的require都是引入你已经安装的eaf扩展
   (require 'eaf-image-viewer)
   ;; (require 'eaf-demo)
   ;; (require 'eaf-git)
   (require 'eaf-browser)
   (require 'eaf-pdf-viewer)

   ;; (require 'eaf-evil)
   ;; 使得在eaf buffer下能正常使用evil的keymap
   (define-key key-translation-map (kbd "SPC")
     (lambda (prompt)
       (if (derived-mode-p 'eaf-mode)
           (pcase eaf--buffer-app-name
             ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
                            (kbd "SPC")
                          (kbd eaf-evil-leader-key)))
             ("pdf-viewer" (kbd eaf-evil-leader-key))
             ("image-viewer" (kbd eaf-evil-leader-key))
             (_  (kbd "SPC")))
         (kbd "SPC"))))
   ;; 设定eaf默认搜索引擎
   (setq eaf-browser-default-search-engine "google")
   ;; 设定eaf开启广告屏蔽器
   (setq eaf-browser-enable-adblocker t)
   ;; 设定eaf浏览器的缩放
   (setq eaf-browser-default-zoom 1.2)
   ;; 修复鼠标乱跑的问题，让她一直放在左下角
   (setq mouse-avoidance-banish-position '((frame-or-window . frame)
                                           (side . right)
                                           (side-pos . 100)
                                           (top-or-bottom . bottom)
                                           (top-or-bottom-pos . -100)))
   (mouse-avoidance-mode 'banish))
#+end_src
